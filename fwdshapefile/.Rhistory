# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(size=4,
aes(label=PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
AGNESlabels=ifelse(BDU2$agnespercorpoor,BDU2$COUNTRY,'')
agnesPlot=base + geom_point(size=3,
aes(color=as.factor(agnespercor))) +
labs(title = "AGNES")
# hacer notorios los paises mal clusterizados
agnesPlot + geom_text_repel(size=4,
aes(label=AGNESlabels),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
DIANAlabels=ifelse(BDU2$dianapercorpoor,BDU2$COUNTRY,'')
dianaPlot=base + geom_point(size=3,
aes(color=dianapercor)) +
labs(title = "DIANA")
# hacer notorios los paises mal clusterizados
dianaPlot + geom_text_repel(size=4,
aes(label=DIANAlabels),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
BDU3=BDU[,-c(3,5,7,9,11,13,14,15,17,19)]
BDU3
boxplot(BDU3[,c(3:10)],horizontal = F,las=2,cex.axis =0.5)
boxplot(normalize(BDU3[,c(3:10)],method='range',range=c(0,10))) #CAMBIAR ORIENTACIÓN DE NOMBRES
library(BBmisc)
boxplot(normalize(BDU3[,c(3:10)],method='standardize'))
BDU3[,c(3:10)]=normalize(BDU3[,c(3:10)],method='standardize') #preguntar si nos quedamos con este o cambiamos por el de range
cor(BDU3[,c(3:10)])
clusBDU3=BDU3[,c(3:10)]
row.names(clusBDU3)=BDU3$COUNTRY
library(cluster)
g.dist2 = daisy(clusBDU3, metric="gower")
library(factoextra)
fviz_nbclust(clusBDU3, pam,diss=g.dist2,method ="gap_stat",k.max =10,verbose =F)
library(dplyr)
library(kableExtra)
set.seed(123)
res.pam2=pam(g.dist2,5,cluster.only=F) #el número refleja la cantidad de clusters
#nueva columna
clusBDU3$pam=res.pam2$cluster
# ver
head(clusBDU3,15)%>%kbl()%>%kable_styling()
fviz_silhouette(res.pam2,print.summary = F) #barras para abajo están mal clusterizadas
silPAM2=data.frame(res.pam2$silinfo$widths) #código para ver que países están mal clusterizados
silPAM2$country=row.names(silPAM)
poorPAM2=silPAM2[silPAM2$sil_width<0,'country']%>%sort()
poorPAM2
aggregate(.~ pam, data=clusBDU3,mean) #dar significado al número asignado
BDU3$pampercor2poor=BDU3$COUNTRY%in%poorPAM
BDU3$pampercor2=as.ordered(clusBDU3$pam)
clusBDU2$pam=NULL
head(BDU3)
fviz_nbclust(clusBDU3, hcut,diss=g.dist2,method = "gap_stat",k.max = 10,verbose = F,hc_func = "agnes")
set.seed(123)
library(factoextra)
res.agnes2<- hcut(g.dist2, k =3,hc_func='agnes',hc_method ="ward.D")
clusBDU3$agnes=res.agnes2$cluster
# ver
head(clusBDU3,15)%>%kbl()%>%kable_styling()
fviz_dend(res.agnes2, cex = 0.7, horiz = T,main = "")
fviz_silhouette(res.agnes2,print.summary = F)
silAGNES2=data.frame(res.agnes2$silinfo$widths)
silAGNES2$country=row.names(silAGNES2)
poorAGNES2=silAGNES2[silAGNES2$sil_width<0,'country']%>%sort()
poorAGNES2
aggregate(.~ agnes, data=clusBDU3,mean)
BDU3$agnespercor2poor=BDU3$COUNTRY%in%poorAGNES
BDU3$agnespercor2=as.ordered(clusBDU3$agnes)
clusBDU3$agnes=NULL
table(BDU3$pampercor2,BDU3$agnespercor2,dnn = c('Particion','Aglomeracion'))
fviz_nbclust(clusBDU3, hcut,diss=g.dist2,method ="gap_stat",k.max = 10,verbose = F,hc_func ="diana")
set.seed(123)
res.diana2 <- hcut(g.dist2, k = 3,hc_func='diana')
clusBDU3$diana=res.diana2$cluster
# veamos
head(clusBDU3,15)%>%kbl%>%kable_styling()
fviz_dend(res.diana2, cex =0.7, horiz = T, main ="")
fviz_silhouette(res.diana2,print.summary = F)
silDIANA2=data.frame(res.diana2$silinfo$widths)
silDIANA2$country=row.names(silDIANA2)
poorDIANA2=silDIANA2[silDIANA2$sil_width<0,'country']%>%sort()
poorDIANA2
aggregate(.~ diana, data=clusBDU3,mean)
original2=aggregate(.~ diana, data=clusBDU3,mean)
original2[order(original2$'2020INDEP'),]
clusBDU3$diana=dplyr::recode(clusBDU3$diana, `2` = 1, `1`= 2,`3`= 3)
BDU3$dianapercor2poor=BDU3$COUNTRY%in%poorDIANA
BDU3$dianapercor2=as.ordered(clusBDU3$diana)
clusBDU3$diana=NULL
head(BDU3)
proyeccion2 = cmdscale(g.dist2, k= 2,add = T)
head(proyeccion2$points,20)
BDU3$dim1 <- proyeccion2$points[,1]
BDU3$dim2 <- proyeccion2$points[,2]
library(ggrepel)
base= ggplot(BDU3,aes(x=dim1, y=dim2,label=row.names(clusBDU3)))
base + geom_text_repel(size=3, max.overlaps = 50,min.segment.length = unit(0,'lines'))
# solo paises mal clusterizados
PAMlabels2=ifelse(BDU3$pampercor2poor,BDU3$COUNTRY,'')
#base
base= ggplot(BDU3,aes(x=dim1, y=dim2)) +
scale_color_brewer(type = 'qual',palette = 'Dark2') + labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot2=base + geom_point(size=3,
aes(color=pampercor2)) +
labs(title = "PAM")
# hacer notorios los paises mal clusterizados
pamPlot2 + geom_text_repel(size=4,
aes(label=PAMlabels2),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
AGNESlabels2=ifelse(BDU3$agnespercor2poor,BDU3$COUNTRY,'')
agnesPlot2=base + geom_point(size=3,
aes(color=as.factor(agnespercor2))) +
labs(title = "AGNES")
# hacer notorios los paises mal clusterizados
agnesPlot2 + geom_text_repel(size=4,
aes(label=AGNESlabels2),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
DIANAlabels2=ifelse(BDU3$dianapercor2poor,BDU3$COUNTRY,'')
dianaPlot2=base + geom_point(size=3,
aes(color=dianapercor2)) +
labs(title = "DIANA")
# hacer notorios los paises mal clusterizados
dianaPlot2 + geom_text_repel(size=4,
aes(label=DIANAlabels2),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
REGRELMTOTAL19 = lm(BDU$`2019PERCOR` ~ BDU$`2019INDEP` + BDU$`2019ELECT` + BDU$`2019AUSCORR` + BDU$`2019DES` + BDU$`2019INFLACION` + BDU$`2019PAR` + BDU$`2019IDH` + BDU$`2019LEG`)
REGRELMTOTAL20 = lm(BDU$`2020PERCOR` ~ BDU$`2020INDEP` + BDU$`2020ELECT` + BDU$`2020AUSCORR` + BDU$`2020DES` + BDU$`2020INFLACION` + BDU$`2020PAR` + BDU$`2020IDH` + BDU$`2020LEG`)
REGREPOITOTAL19 = glm(BDU$`2019PERCOR` ~ BDU$`2019INDEP` + BDU$`2019ELECT` + BDU$`2019AUSCORR` + BDU$`2019DES` + BDU$`2019INFLACION` + BDU$`2019PAR` + BDU$`2019IDH` + BDU$`2019LEG`,family = poisson(link = "log"))
REGREPOITOTAL20 = glm(BDU$`2020PERCOR` ~ BDU$`2020INDEP` + BDU$`2020ELECT` + BDU$`2020AUSCORR` + BDU$`2020DES` + BDU$`2020INFLACION` + BDU$`2020PAR` + BDU$`2020IDH` + BDU$`2020LEG`,family = poisson(link = "log"))
modelslmpoi=list('Lineal asegurada' =REGRELMTOTAL19,
'Poisson asegurada' = REGREPOITOTAL19)
modelsummary(modelslmpoi, title = "Regresiones Lineal y Poisson 2019",
stars = TRUE,
output = "kableExtra")
modelspoi19=list('Poisson asegurada' =REGREPOITOTAL19)
modelsummary(modelspoi19, title = "Regresión Poisson - Año 2019",
stars = TRUE,
output = "kableExtra")
f2019 <- function (x) format(x, digits =4, scientific = FALSE)
modelsummary(modelspoi19,
fmt=f2019,
exponentiate = T,
statistic = 'conf.int',
title = "Exponenciales de la Regresión Poisson - Año 2019",
stars =TRUE,
output = "kableExtra")
modelslmpoi2=list('Lineal asegurada' =REGRELMTOTAL20,
'Poisson asegurada' = REGREPOITOTAL2020)
modelslmpoi2=list('Lineal asegurada' =REGRELMTOTAL20,
'Poisson asegurada' =REGREPOITOTAL2020)
modelslmpoi2=list('Lineal asegurada' =REGRELMTOTAL20,
'Poisson asegurada' =REGREPOITOTAL2020)
modelslmpoi2=list('Lineal asegurada' =REGRELMTOTAL20,
'Poisson asegurada' =REGREPOITOTAL20)
modelsummary(modelslmpoi2, title = "Regresiones Lineal y Poisson 2020",
stars = TRUE,
output = "kableExtra")
modelspoi20=list('Poisson asegurada' =REGREPOITOTAL20)
modelsummary(modelspoi20, title = "Regresión Poisson - Año 2020",
stars = TRUE,
output = "kableExtra")
f2020 <- function (x) format(x, digits =4, scientific = FALSE)
modelsummary(modelspoi20,
fmt=f2020,
exponentiate = T,
statistic = 'conf.int',
title = "Exponenciales de la Regresión Poisson - Año 2020",
stars =TRUE,
output = "kableExtra")
setwd("~/GitHub/PRACTICAS_ESTA2/fwdshapefile")
getwd()
library(sp)
library(rgdal)
library(ggplot2)
mapDIS=sf::read_sf("C:/Users/Santiago/OneDrive/Documentos/GitHub/PRACTICAS_ESTA2/fwdshapefile/world-administrative-boundaries.shp")
MAP = merge(mapDIS,BDU, by.x = "iso3", by.y = "ISO", all.x = T)
mapaleyendaL= ggplot(MAP)+ geom_sf() + theme_light()
mapaleyL= mapaleyendaL + geom_sf(data=MAP,
aes(fill=`2019PERCOR`),color = NA)
mapa3= mapaleyL +
coord_sf() +
scale_fill_gradient(low = "seashell",  high = "firebrick", breaks=seq(from=0, to=1, by=.2)) + theme_void() +
theme(axis.title = element_blank(), axis.text = element_blank(), legend.position = c(1.1,0.55)) + labs(fill=" ") + theme(legend.text = element_text(size = 13)) +
labs(title = "Percepción de corrupción - 2019", subtitle = "") +
theme(
plot.title = element_text(color="black", size=15, face="bold"),
plot.caption = element_text(color = "black", size=10))
mapa3
mapaleyendaL2= ggplot(MAP)+ geom_sf() + theme_light()
mapaleyL2= mapaleyendaL2 + geom_sf(data=MAP,
aes(fill=`2020PERCOR`),color = NA)
mapa4= mapaleyL2 +
coord_sf() +
scale_fill_gradient(low = "seashell",  high = "firebrick", breaks=seq(from=0, to=1, by=.2)) + theme_void() +
theme(axis.title = element_blank(), axis.text = element_blank(), legend.position = c(1.1,0.55)) + labs(fill=" ") + theme(legend.text = element_text(size = 13)) +
labs(title = "Percepción de corrupción - 2020", subtitle = "") +
theme(
plot.title = element_text(color="black", size=15, face="bold"),
plot.caption = element_text(color = "black", size=10))
mapa4
aggregate(.~ diana, data=clusBDU2,mean)
library(rio)
library(dplyr)
library(ggplot2)
library(cowplot)
library(kableExtra)
library(equatiomatic)
library(tables)
library(rmarkdown)
library(reshape)
library(DT)
library(modelsummary)
library(factoextra)
library(cluster)
library(tidyverse)
library(hrbrthemes)
LinkBDU = "https://github.com/santiagomv29/PRACTICAS_ESTA2/raw/main/dataunificada.csv"
library(rio)
BDU = import(LinkBDU)
head(BDU)
g2019 = barplot(BDU$`2019PERCOR`,main="Percepción de corrupción - Año 2019",ylab="Puntaje",xlab= NULL,las=2, ylim= c(0,100),width = 1, space = 1, names.arg = BDU$COUNTRY, col = "skyblue", border = "black")
g2020 = barplot(BDU$`2020PERCOR`,main="Percepción de corrupción - Año 2019",ylab="Puntaje",xlab= NULL,las=2, ylim= c(0,100), width = 1, space = 1, names.arg = BDU$COUNTRY, col = "lightgreen", border = "black")
library(sp)
library(rgdal)
library(ggplot2)
mapDIS=sf::read_sf("C:/Users/Santiago/OneDrive/Documentos/GitHub/PRACTICAS_ESTA2/fwdshapefile/world-administrative-boundaries.shp")
MAP = merge(mapDIS,BDU, by.x = "iso3", by.y = "ISO", all.x = T)
mapaleyendaL= ggplot(MAP)+ geom_sf() + theme_light()
mapaleyL= mapaleyendaL + geom_sf(data=MAP,
aes(fill=`2019PERCOR`),color = NA)
mapa3= mapaleyL +
coord_sf() +
scale_fill_gradient(low = "seashell",  high = "firebrick", breaks=seq(from=0, to=1, by=.2)) + theme_void() +
theme(axis.title = element_blank(), axis.text = element_blank(), legend.position = c(1.1,0.55)) + labs(fill=" ") + theme(legend.text = element_text(size = 13)) +
labs(title = "Percepción de corrupción - 2019", subtitle = "") +
theme(
plot.title = element_text(color="black", size=15, face="bold"),
plot.caption = element_text(color = "black", size=10))
mapa3
mapaleyendaL2= ggplot(MAP)+ geom_sf() + theme_light()
mapaleyL2= mapaleyendaL2 + geom_sf(data=MAP,
aes(fill=`2020PERCOR`),color = NA)
mapa4= mapaleyL2 +
coord_sf() +
scale_fill_gradient(low = "seashell",  high = "firebrick", breaks=seq(from=0, to=1, by=.2)) + theme_void() +
theme(axis.title = element_blank(), axis.text = element_blank(), legend.position = c(1.1,0.55)) + labs(fill=" ") + theme(legend.text = element_text(size = 13)) +
labs(title = "Percepción de corrupción - 2020", subtitle = "") +
theme(
plot.title = element_text(color="black", size=15, face="bold"),
plot.caption = element_text(color = "black", size=10))
mapa4
BDU2=BDU[,-c(4,6,8,10,12,13,14,16,18,20)]
BDU2
boxplot(BDU2[,c(3:10)],horizontal = F,las=2,cex.axis =0.5)
library(BBmisc)
boxplot(normalize(BDU2[,c(3:10)],method='range',range=c(0,10))) #CAMBIAR ORIENTACIÓN DE NOMBRES
library(BBmisc)
boxplot(normalize(BDU2[,c(3:10)],method='standardize'))
BDU2[,c(3:10)]=normalize(BDU2[,c(3:10)],method='standardize') #preguntar si nos quedamos con este o cambiamos por el de range
cor(BDU2[,c(3:10)])
clusBDU2=BDU2[,c(3:10)]
row.names(clusBDU2)=BDU2$COUNTRY
library(cluster)
g.dist = daisy(clusBDU2, metric="gower")
library(factoextra)
fviz_nbclust(clusBDU2, pam,diss=g.dist,method ="gap_stat",k.max =10,verbose =F)
library(dplyr)
library(kableExtra) #rango entre 3 y 5 (elegir 5 por que es el más cercano a 9) /VOLVER FACTOR EL VECTOR DE CLUSTER
set.seed(123)
res.pam=pam(g.dist,5,cluster.only=F) #el número refleja la cantidad de clusters
#nueva columna
clusBDU2$pam=res.pam$cluster
# ver
head(clusBDU2,15)%>%kbl()%>%kable_styling()
fviz_silhouette(res.pam,print.summary = F) #barras para abajo están mal clusterizadas
silPAM=data.frame(res.pam$silinfo$widths) #código para ver que países están mal clusterizados
silPAM$country=row.names(silPAM)
poorPAM=silPAM[silPAM$sil_width<0,'country']%>%sort()
poorPAM
aggregate(.~ pam, data=clusBDU2,mean) #dar significado al número asignado
BDU2$pampercorpoor=BDU2$COUNTRY%in%poorPAM
BDU2$pampercor=as.ordered(clusBDU2$pam)
clusBDU2$pam=NULL
head(BDU2)
fviz_nbclust(clusBDU2, hcut,diss=g.dist,method = "gap_stat",k.max = 10,verbose = F,hc_func = "agnes")
set.seed(123)
library(factoextra)
res.agnes<- hcut(g.dist, k =2,hc_func='agnes',hc_method ="ward.D")
clusBDU2$agnes=res.agnes$cluster
# ver
head(clusBDU2,15)%>%kbl()%>%kable_styling()
fviz_dend(res.agnes, cex = 0.7, horiz = T,main = "")
fviz_silhouette(res.agnes,print.summary = F)
silAGNES=data.frame(res.agnes$silinfo$widths)
silAGNES$country=row.names(silAGNES)
poorAGNES=silAGNES[silAGNES$sil_width<0,'country']%>%sort()
table(poorAGNES)
aggregate(.~ agnes, data=clusBDU2,mean)
BDU2$agnespercorpoor=BDU2$COUNTRY%in%poorAGNES
BDU2$agnespercor=as.ordered(clusBDU2$agnes)
clusBDU2$agnes=NULL
table(BDU2$pampercor,BDU2$agnespercor,dnn = c('Particion','Aglomeracion'))
fviz_nbclust(clusBDU2, hcut,diss=g.dist,method ="gap_stat",k.max = 10,verbose = F,hc_func ="diana")
set.seed(123)
res.diana <- hcut(g.dist, k = 3,hc_func='diana') #se elige 3 por ser el número más cercano a 1
clusBDU2$diana=res.diana$cluster
# veamos
head(clusBDU2,15)%>%kbl%>%kable_styling()
fviz_dend(res.diana, cex =0.7, horiz = T, main ="")
fviz_silhouette(res.diana,print.summary = F)
silDIANA=data.frame(res.diana$silinfo$widths)
silDIANA$country=row.names(silDIANA)
poorDIANA=silDIANA[silDIANA$sil_width<0,'country']%>%sort()
table(poorDIANA)
aggregate(.~ diana, data=clusBDU2,mean)
original=aggregate(.~ diana, data=clusBDU2,mean)
original[order(original$'2019INDEP'),]
clusBDU2$diana=dplyr::recode(clusBDU2$diana, `2` = 1, `1`= 2,`3`= 3)
BDU2$dianapercorpoor=BDU2$COUNTRY%in%poorDIANA
BDU2$dianapercor=as.ordered(clusBDU2$diana)
clusBDU2$diana=NULL
head(BDU2)
proyeccion = cmdscale(g.dist, k= 2,add = T)
head(proyeccion$points,20)
BDU2$dim1 <- proyeccion$points[,1]
BDU2$dim2 <- proyeccion$points[,2]
library(ggrepel)
base= ggplot(BDU2,aes(x=dim1, y=dim2,label=row.names(clusBDU2)))
base + geom_text_repel(size=3, max.overlaps = 50,min.segment.length = unit(0,'lines'))
# solo paises mal clusterizados
PAMlabels=ifelse(BDU2$pampercorpoor,BDU2$COUNTRY,'')
#base
base= ggplot(BDU2,aes(x=dim1, y=dim2)) +
scale_color_brewer(type = 'qual',palette = 'Dark2') + labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot=base + geom_point(size=3,
aes(color=pampercor)) +
labs(title = "PAM")
# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(size=4,
aes(label=PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
AGNESlabels=ifelse(BDU2$agnespercorpoor,BDU2$COUNTRY,'')
agnesPlot=base + geom_point(size=3,
aes(color=as.factor(agnespercor))) +
labs(title = "AGNES")
# hacer notorios los paises mal clusterizados
agnesPlot + geom_text_repel(size=4,
aes(label=AGNESlabels),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
DIANAlabels=ifelse(BDU2$dianapercorpoor,BDU2$COUNTRY,'')
dianaPlot=base + geom_point(size=3,
aes(color=dianapercor)) +
labs(title = "DIANA")
# hacer notorios los paises mal clusterizados
dianaPlot + geom_text_repel(size=4,
aes(label=DIANAlabels),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
BDU3=BDU[,-c(3,5,7,9,11,13,14,15,17,19)]
BDU3
boxplot(BDU3[,c(3:10)],horizontal = F,las=2,cex.axis =0.5)
boxplot(normalize(BDU3[,c(3:10)],method='range',range=c(0,10))) #CAMBIAR ORIENTACIÓN DE NOMBRES
library(BBmisc)
boxplot(normalize(BDU3[,c(3:10)],method='standardize'))
BDU3[,c(3:10)]=normalize(BDU3[,c(3:10)],method='standardize') #preguntar si nos quedamos con este o cambiamos por el de range
cor(BDU3[,c(3:10)])
clusBDU3=BDU3[,c(3:10)]
row.names(clusBDU3)=BDU3$COUNTRY
library(cluster)
g.dist2 = daisy(clusBDU3, metric="gower")
library(factoextra)
fviz_nbclust(clusBDU3, pam,diss=g.dist2,method ="gap_stat",k.max =10,verbose =F)
library(dplyr)
library(kableExtra)
set.seed(123)
res.pam2=pam(g.dist2,5,cluster.only=F) #el número refleja la cantidad de clusters (se elige 5 por que es el más cercano a 9)
#nueva columna
clusBDU3$pam=res.pam2$cluster
# ver
head(clusBDU3,15)%>%kbl()%>%kable_styling()
fviz_silhouette(res.pam2,print.summary = F) #barras para abajo están mal clusterizadas
silPAM2=data.frame(res.pam2$silinfo$widths) #código para ver que países están mal clusterizados
silPAM2$country=row.names(silPAM)
poorPAM2=silPAM2[silPAM2$sil_width<0,'country']%>%sort()
poorPAM2
aggregate(.~ pam, data=clusBDU3,mean) #dar significado al número asignado
BDU3$pampercor2poor=BDU3$COUNTRY%in%poorPAM
BDU3$pampercor2=as.ordered(clusBDU3$pam)
clusBDU2$pam=NULL
head(BDU3)
fviz_nbclust(clusBDU3, hcut,diss=g.dist2,method = "gap_stat",k.max = 10,verbose = F,hc_func = "agnes")
set.seed(123)
library(factoextra)
res.agnes2<- hcut(g.dist2, k =3,hc_func='agnes',hc_method ="ward.D")
clusBDU3$agnes=res.agnes2$cluster
# ver
head(clusBDU3,15)%>%kbl()%>%kable_styling()
fviz_dend(res.agnes2, cex = 0.7, horiz = T,main = "")
fviz_silhouette(res.agnes2,print.summary = F)
silAGNES2=data.frame(res.agnes2$silinfo$widths)
silAGNES2$country=row.names(silAGNES2)
poorAGNES2=silAGNES2[silAGNES2$sil_width<0,'country']%>%sort()
poorAGNES2
aggregate(.~ agnes, data=clusBDU3,mean)
BDU3$agnespercor2poor=BDU3$COUNTRY%in%poorAGNES
BDU3$agnespercor2=as.ordered(clusBDU3$agnes)
clusBDU3$agnes=NULL
table(BDU3$pampercor2,BDU3$agnespercor2,dnn = c('Particion','Aglomeracion'))
fviz_nbclust(clusBDU3, hcut,diss=g.dist2,method ="gap_stat",k.max = 10,verbose = F,hc_func ="diana")
set.seed(123)
res.diana2 <- hcut(g.dist2, k = 3,hc_func='diana')
clusBDU3$diana=res.diana2$cluster
# veamos
head(clusBDU3,15)%>%kbl%>%kable_styling()
fviz_dend(res.diana2, cex =0.7, horiz = T, main ="")
fviz_silhouette(res.diana2,print.summary = F)
silDIANA2=data.frame(res.diana2$silinfo$widths)
silDIANA2$country=row.names(silDIANA2)
poorDIANA2=silDIANA2[silDIANA2$sil_width<0,'country']%>%sort()
poorDIANA2
aggregate(.~ diana, data=clusBDU3,mean)
original2=aggregate(.~ diana, data=clusBDU3,mean)
original2[order(original2$'2020INDEP'),]
clusBDU3$diana=dplyr::recode(clusBDU3$diana, `2` = 1, `1`= 2,`3`= 3)
BDU3$dianapercor2poor=BDU3$COUNTRY%in%poorDIANA
BDU3$dianapercor2=as.ordered(clusBDU3$diana)
clusBDU3$diana=NULL
head(BDU3)
proyeccion2 = cmdscale(g.dist2, k= 2,add = T)
head(proyeccion2$points,20)
BDU3$dim1 <- proyeccion2$points[,1]
BDU3$dim2 <- proyeccion2$points[,2]
library(ggrepel)
base= ggplot(BDU3,aes(x=dim1, y=dim2,label=row.names(clusBDU3)))
base + geom_text_repel(size=3, max.overlaps = 50,min.segment.length = unit(0,'lines'))
# solo paises mal clusterizados
PAMlabels2=ifelse(BDU3$pampercor2poor,BDU3$COUNTRY,'')
#base
base= ggplot(BDU3,aes(x=dim1, y=dim2)) +
scale_color_brewer(type = 'qual',palette = 'Dark2') + labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot2=base + geom_point(size=3,
aes(color=pampercor2)) +
labs(title = "PAM")
# hacer notorios los paises mal clusterizados
pamPlot2 + geom_text_repel(size=4,
aes(label=PAMlabels2),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
AGNESlabels2=ifelse(BDU3$agnespercor2poor,BDU3$COUNTRY,'')
agnesPlot2=base + geom_point(size=3,
aes(color=as.factor(agnespercor2))) +
labs(title = "AGNES")
# hacer notorios los paises mal clusterizados
agnesPlot2 + geom_text_repel(size=4,
aes(label=AGNESlabels2),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
DIANAlabels2=ifelse(BDU3$dianapercor2poor,BDU3$COUNTRY,'')
dianaPlot2=base + geom_point(size=3,
aes(color=dianapercor2)) +
labs(title = "DIANA")
# hacer notorios los paises mal clusterizados
dianaPlot2 + geom_text_repel(size=4,
aes(label=DIANAlabels2),
max.overlaps = 50,
min.segment.length = unit(0,'lines'))
REGRELMTOTAL19 = lm(BDU$`2019PERCOR` ~ BDU$`2019INDEP` + BDU$`2019ELECT` + BDU$`2019AUSCORR` + BDU$`2019DES` + BDU$`2019INFLACION` + BDU$`2019PAR` + BDU$`2019IDH` + BDU$`2019LEG`)
REGRELMTOTAL20 = lm(BDU$`2020PERCOR` ~ BDU$`2020INDEP` + BDU$`2020ELECT` + BDU$`2020AUSCORR` + BDU$`2020DES` + BDU$`2020INFLACION` + BDU$`2020PAR` + BDU$`2020IDH` + BDU$`2020LEG`)
REGREPOITOTAL19 = glm(BDU$`2019PERCOR` ~ BDU$`2019INDEP` + BDU$`2019ELECT` + BDU$`2019AUSCORR` + BDU$`2019DES` + BDU$`2019INFLACION` + BDU$`2019PAR` + BDU$`2019IDH` + BDU$`2019LEG`,family = poisson(link = "log"))
REGREPOITOTAL20 = glm(BDU$`2020PERCOR` ~ BDU$`2020INDEP` + BDU$`2020ELECT` + BDU$`2020AUSCORR` + BDU$`2020DES` + BDU$`2020INFLACION` + BDU$`2020PAR` + BDU$`2020IDH` + BDU$`2020LEG`,family = poisson(link = "log"))
modelslmpoi=list('Lineal asegurada' =REGRELMTOTAL19,
'Poisson asegurada' = REGREPOITOTAL19)
modelsummary(modelslmpoi, title = "Regresiones Lineal y Poisson 2019",
stars = TRUE,
output = "kableExtra")
modelspoi19=list('Poisson asegurada' =REGREPOITOTAL19)
modelsummary(modelspoi19, title = "Regresión Poisson - Año 2019",
stars = TRUE,
output = "kableExtra")
f2019 <- function (x) format(x, digits =4, scientific = FALSE)
modelsummary(modelspoi19,
fmt=f2019,
exponentiate = T,
statistic = 'conf.int',
title = "Exponenciales de la Regresión Poisson - Año 2019",
stars =TRUE,
output = "kableExtra")
modelslmpoi2=list('Lineal asegurada' =REGRELMTOTAL20,
'Poisson asegurada' =REGREPOITOTAL20)
modelsummary(modelslmpoi2, title = "Regresiones Lineal y Poisson 2020",
stars = TRUE,
output = "kableExtra")
modelspoi20=list('Poisson asegurada' =REGREPOITOTAL20)
modelsummary(modelspoi20, title = "Regresión Poisson - Año 2020",
stars = TRUE,
output = "kableExtra")
f2020 <- function (x) format(x, digits =4, scientific = FALSE)
modelsummary(modelspoi20,
fmt=f2020,
exponentiate = T,
statistic = 'conf.int',
title = "Exponenciales de la Regresión Poisson - Año 2020",
stars =TRUE,
output = "kableExtra")
